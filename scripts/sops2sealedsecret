#!/bin/bash
: <<'COMMENT'
you are a system administrator using bash. please use long command line arguments or flags. create a shell script,
that takes 'context' and 'namespace' as a mandatory flags and two arguments: fromSopsFile and toSealedSecretFile.

the script shall check if it is authorized to the given OpenShift context by using `oc --context <context> project
default`

please check and error handle if both files exist and if the files are accessible/readable. also check if the two files
are the same, by comparing their names. print a warning message if the <toSealedSecretFile> exists, if the 'force'
command line flag is given, the script proceeds, if not, the script stops with an error return code.

if all checks are passed, use `sops -d <fromSopsFile> | kubeseal --context <context> --namespace <namespace>
--controller-namespace sealed-secrets --format yaml ><toSealedSecretFile>`to sops-decrypt the <fromSopsFile> and
kubeseal it, redirecting the ourput to <toSealedSecretFile>

the final message of the script shall include all the information given as input, and say something like 'successfully
reencrypted from SOPS to SealedSecret'
COMMENT

# Check for mandatory flags and arguments
if [[ ! $* == *"--context"* ]] || [[ ! $* == *"--namespace"* ]] || [[ $# -lt 4 ]]; then
    echo "Usage: $0 --context <context> --namespace <namespace> <fromSopsFile> <toSealedSecretFile> [--force]"
    exit 1
fi

# Parse command line arguments and flags
while [[ $# -gt 0 ]]; do
    key="$1"

    case $key in
    --context)
        CONTEXT="$2"
        shift
        shift
        ;;
    --namespace)
        NAMESPACE="$2"
        shift
        shift
        ;;
    --force)
        FORCE=true
        shift
        ;;
    *)
        if [[ ! $FROM_SOPS_FILE ]]; then
            FROM_SOPS_FILE="$1"
        else
            TO_SEALED_SECRET_FILE="$1"
        fi
        shift
        ;;
    esac
done

# Check if authorized to the given OpenShift context
if ! oc --context "$CONTEXT" project default &>/dev/null; then
    echo "Error: Not authorized to the given OpenShift context."
    exit 1
fi

# Check if both files exist and are readable
if [[ ! -r $FROM_SOPS_FILE ]]; then
    echo "Error: $FROM_SOPS_FILE does not exist or is not readable."
    exit 1
fi

if [[ -e $TO_SEALED_SECRET_FILE ]]; then
    if [[ ! -r $TO_SEALED_SECRET_FILE ]]; then
        echo "Error: $TO_SEALED_SECRET_FILE is not readable."
        exit 1
    elif [[ $FROM_SOPS_FILE == $TO_SEALED_SECRET_FILE ]]; then
        echo "Error: Both files have the same name."
        exit 1
    elif [[ ! $FORCE ]]; then
        echo "Warning: $TO_SEALED_SECRET_FILE already exists. Use --force to overwrite."
        exit 1
    fi
fi

# Decrypt with sops and reencrypt with kubeseal
sops -d "$FROM_SOPS_FILE" | kubeseal --context "$CONTEXT" --namespace "$NAMESPACE" --controller-namespace sealed-secrets --format yaml >"$TO_SEALED_SECRET_FILE"

echo "Successfully reencrypted from SOPS to SealedSecret using context: $CONTEXT, namespace: $NAMESPACE, from: $FROM_SOPS_FILE, to: $TO_SEALED_SECRET_FILE"
